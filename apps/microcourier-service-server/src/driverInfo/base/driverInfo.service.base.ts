/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DriverInfo as PrismaDriverInfo,
  User as PrismaUser,
} from "@prisma/client";

export class DriverInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DriverInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.driverInfo.count(args);
  }

  async driverInfos(
    args: Prisma.DriverInfoFindManyArgs
  ): Promise<PrismaDriverInfo[]> {
    return this.prisma.driverInfo.findMany(args);
  }
  async driverInfo(
    args: Prisma.DriverInfoFindUniqueArgs
  ): Promise<PrismaDriverInfo | null> {
    return this.prisma.driverInfo.findUnique(args);
  }
  async createDriverInfo(
    args: Prisma.DriverInfoCreateArgs
  ): Promise<PrismaDriverInfo> {
    return this.prisma.driverInfo.create(args);
  }
  async updateDriverInfo(
    args: Prisma.DriverInfoUpdateArgs
  ): Promise<PrismaDriverInfo> {
    return this.prisma.driverInfo.update(args);
  }
  async deleteDriverInfo(
    args: Prisma.DriverInfoDeleteArgs
  ): Promise<PrismaDriverInfo> {
    return this.prisma.driverInfo.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.driverInfo
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
