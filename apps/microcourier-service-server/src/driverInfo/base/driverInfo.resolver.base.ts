/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DriverInfo } from "./DriverInfo";
import { DriverInfoCountArgs } from "./DriverInfoCountArgs";
import { DriverInfoFindManyArgs } from "./DriverInfoFindManyArgs";
import { DriverInfoFindUniqueArgs } from "./DriverInfoFindUniqueArgs";
import { CreateDriverInfoArgs } from "./CreateDriverInfoArgs";
import { UpdateDriverInfoArgs } from "./UpdateDriverInfoArgs";
import { DeleteDriverInfoArgs } from "./DeleteDriverInfoArgs";
import { User } from "../../user/base/User";
import { DriverInfoService } from "../driverInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DriverInfo)
export class DriverInfoResolverBase {
  constructor(
    protected readonly service: DriverInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DriverInfo",
    action: "read",
    possession: "any",
  })
  async _driverInfosMeta(
    @graphql.Args() args: DriverInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DriverInfo])
  @nestAccessControl.UseRoles({
    resource: "DriverInfo",
    action: "read",
    possession: "any",
  })
  async driverInfos(
    @graphql.Args() args: DriverInfoFindManyArgs
  ): Promise<DriverInfo[]> {
    return this.service.driverInfos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DriverInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DriverInfo",
    action: "read",
    possession: "own",
  })
  async driverInfo(
    @graphql.Args() args: DriverInfoFindUniqueArgs
  ): Promise<DriverInfo | null> {
    const result = await this.service.driverInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DriverInfo)
  @nestAccessControl.UseRoles({
    resource: "DriverInfo",
    action: "create",
    possession: "any",
  })
  async createDriverInfo(
    @graphql.Args() args: CreateDriverInfoArgs
  ): Promise<DriverInfo> {
    return await this.service.createDriverInfo({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DriverInfo)
  @nestAccessControl.UseRoles({
    resource: "DriverInfo",
    action: "update",
    possession: "any",
  })
  async updateDriverInfo(
    @graphql.Args() args: UpdateDriverInfoArgs
  ): Promise<DriverInfo | null> {
    try {
      return await this.service.updateDriverInfo({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DriverInfo)
  @nestAccessControl.UseRoles({
    resource: "DriverInfo",
    action: "delete",
    possession: "any",
  })
  async deleteDriverInfo(
    @graphql.Args() args: DeleteDriverInfoArgs
  ): Promise<DriverInfo | null> {
    try {
      return await this.service.deleteDriverInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: DriverInfo): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
