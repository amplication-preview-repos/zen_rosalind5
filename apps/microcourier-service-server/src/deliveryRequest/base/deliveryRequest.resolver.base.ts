/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DeliveryRequest } from "./DeliveryRequest";
import { DeliveryRequestCountArgs } from "./DeliveryRequestCountArgs";
import { DeliveryRequestFindManyArgs } from "./DeliveryRequestFindManyArgs";
import { DeliveryRequestFindUniqueArgs } from "./DeliveryRequestFindUniqueArgs";
import { CreateDeliveryRequestArgs } from "./CreateDeliveryRequestArgs";
import { UpdateDeliveryRequestArgs } from "./UpdateDeliveryRequestArgs";
import { DeleteDeliveryRequestArgs } from "./DeleteDeliveryRequestArgs";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { DeliveryRequestService } from "../deliveryRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DeliveryRequest)
export class DeliveryRequestResolverBase {
  constructor(
    protected readonly service: DeliveryRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DeliveryRequest",
    action: "read",
    possession: "any",
  })
  async _deliveryRequestsMeta(
    @graphql.Args() args: DeliveryRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DeliveryRequest])
  @nestAccessControl.UseRoles({
    resource: "DeliveryRequest",
    action: "read",
    possession: "any",
  })
  async deliveryRequests(
    @graphql.Args() args: DeliveryRequestFindManyArgs
  ): Promise<DeliveryRequest[]> {
    return this.service.deliveryRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DeliveryRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DeliveryRequest",
    action: "read",
    possession: "own",
  })
  async deliveryRequest(
    @graphql.Args() args: DeliveryRequestFindUniqueArgs
  ): Promise<DeliveryRequest | null> {
    const result = await this.service.deliveryRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliveryRequest)
  @nestAccessControl.UseRoles({
    resource: "DeliveryRequest",
    action: "create",
    possession: "any",
  })
  async createDeliveryRequest(
    @graphql.Args() args: CreateDeliveryRequestArgs
  ): Promise<DeliveryRequest> {
    return await this.service.createDeliveryRequest({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliveryRequest)
  @nestAccessControl.UseRoles({
    resource: "DeliveryRequest",
    action: "update",
    possession: "any",
  })
  async updateDeliveryRequest(
    @graphql.Args() args: UpdateDeliveryRequestArgs
  ): Promise<DeliveryRequest | null> {
    try {
      return await this.service.updateDeliveryRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryRequest)
  @nestAccessControl.UseRoles({
    resource: "DeliveryRequest",
    action: "delete",
    possession: "any",
  })
  async deleteDeliveryRequest(
    @graphql.Args() args: DeleteDeliveryRequestArgs
  ): Promise<DeliveryRequest | null> {
    try {
      return await this.service.deleteDeliveryRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payment], { name: "payments" })
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @graphql.Parent() parent: DeliveryRequest,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
